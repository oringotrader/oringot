'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { getSmartTradingStrategy, SmartTradingStrategyInput, SmartTradingStrategyOutput } from '@/ai/flows/smart-trading-strategy';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { Loader2, Wand2 } from 'lucide-react';

const formSchema = z.object({
  marketCondition: z.string().min(1, 'Market condition is required.'),
  riskTolerance: z.enum(['low', 'medium', 'high']),
  tradingGoal: z.string().min(1, 'Trading goal is required.'),
  assetType: z.enum(['stock', 'crypto']),
});

export default function SmartStrategy() {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<SmartTradingStrategyOutput | null>(null);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      marketCondition: '',
      riskTolerance: 'medium',
      tradingGoal: '',
      assetType: 'stock',
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setLoading(true);
    setResult(null);
    try {
      const strategy = await getSmartTradingStrategy(values as SmartTradingStrategyInput);
      setResult(strategy);
    } catch (error) {
      console.error(error);
      toast({
        title: 'Error',
        description: 'Failed to generate a trading strategy. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  }

  return (
    <section id="smart-strategy" className="container py-12 md:py-24">
      <div className="mx-auto max-w-3xl text-center">
        <h2 className="text-3xl font-bold tracking-tight text-foreground md:text-4xl font-headline">
          Get Your Personalized AI-Powered Strategy
        </h2>
        <p className="mt-4 text-lg text-muted-foreground">
          Fill out the form below to get a custom trading strategy generated by our AI, tailored to your specific needs and the current market.
        </p>
      </div>

      <div className="mt-12 grid gap-8 md:grid-cols-2">
        <Card className="flex flex-col">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="flex h-full flex-col">
              <CardHeader>
                <CardTitle>Strategy Generator</CardTitle>
                <CardDescription>Describe your situation to get a custom strategy.</CardDescription>
              </CardHeader>
              <CardContent className="grid gap-4">
                <FormField
                  control={form.control}
                  name="marketCondition"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Market Condition</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Bullish, Bearish, Volatile" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="tradingGoal"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Trading Goal</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Long-term growth, Short-term profit" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="riskTolerance"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Risk Tolerance</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select risk level" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="low">Low</SelectItem>
                            <SelectItem value="medium">Medium</SelectItem>
                            <SelectItem value="high">High</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="assetType"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Asset Type</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select asset type" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="stock">Stock</SelectItem>
                            <SelectItem value="crypto">Crypto</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </CardContent>
              <CardFooter className="mt-auto">
                <Button type="submit" disabled={loading} className="w-full">
                  {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Wand2 className="mr-2 h-4 w-4" />}
                  Generate Strategy
                </Button>
              </CardFooter>
            </form>
          </Form>
        </Card>

        <Card className="flex flex-col">
          <CardHeader>
            <CardTitle>Your Custom Strategy</CardTitle>
            <CardDescription>The AI-generated strategy will appear here.</CardDescription>
          </CardHeader>
          <CardContent className="flex-1">
            {loading && (
              <div className="flex h-full items-center justify-center">
                <Loader2 className="size-8 animate-spin text-primary" />
              </div>
            )}
            {result && (
              <div className="space-y-4">
                <div>
                  <h3 className="font-semibold text-foreground">Strategy:</h3>
                  <p className="text-sm text-muted-foreground">{result.strategy}</p>
                </div>
                <div>
                  <h3 className="font-semibold text-foreground">Explanation:</h3>
                  <p className="text-sm text-muted-foreground">{result.explanation}</p>
                </div>
              </div>
            )}
            {!loading && !result && (
              <div className="flex h-full items-center justify-center rounded-lg border-2 border-dashed bg-muted/50 p-8 text-center">
                <p className="text-muted-foreground">Your results will be shown here once generated.</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </section>
  );
}
